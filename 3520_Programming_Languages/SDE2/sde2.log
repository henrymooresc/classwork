# use "sde2.caml";;

val r_duplicate : int list -> int = <fun>
val first_duplicate : int list -> int = <fun>
val r_nonrepeating : int list * int list -> int = <fun>
val first_nonrepeating : int list -> int = <fun>
val r_sum_helper : int * int list * int -> bool = <fun>
val r_list_helper : int list * int list * int -> bool = <fun>
val sumOfTwo : int list * int list * int -> bool = <fun>
val r_cyk : (int * int) list * int * int -> (int * int) list = <fun>
val cyk_sublists : int -> (int * int) list = <fun>

# first_duplicate [1;2;3;4;5;6;7;4;5;8;9];;
- : int = 4
# first_duplicate [1;2;3;4;5;6;7;8;9;10];;
- : int = -1000

# first_nonrepeating [1;2;3;2;7;5;6;1;3];;
- : int = 7
# first_nonrepeating [1;2;3;4;5;1;2;3;4;5];;
- : int = -1000

# sumOfTwo ([1;2;3],[10;20;30;40],42);;
- : bool = true
# sumOfTwo ([1;2;3],[10;20;30;40],44);;
- : bool = false

# cyk_sublists 4;;
- : (int * int) list = [(1, 3); (2, 2); (3, 1)]
# cyk_sublists 1;;
- : (int * int) list = []